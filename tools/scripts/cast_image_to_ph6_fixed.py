#!/usr/bin/env python3
import asyncio
import logging
import math
import sys
import os
from PIL import Image
from bleak import BleakClient

# ÈÖçÁΩÆÂèÉÊï∏
DEVICE_ADDRESS = "6A422DCC-2730-B0E8-E8B8-1C513A0D7B10"
COMMAND_CHAR_UUID = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
ACK_CHAR_UUID = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

# ÈÖçÁΩÆÊó•Ë™å
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

# Â∏∏ÈáèÂÆöÁæ©
DEF_MTU = 247
SEND_PIC_DATA_NO_RES = 2
SEND_PIC_DATA_BLOCK = 3

CRC8_TABLE = [
    0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
    157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
    35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
    190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
    70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
    219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
    101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
    248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
    140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
    17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
    175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
    50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
    202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
    87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
    233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
    116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53
]

def color_distance(c1, c2):
    dr = c1[0] - c2[0]
    dg = c1[1] - c2[1]
    db = c1[2] - c2[2]
    return math.sqrt(dr * dr + dg * dg + db * db)

def find_nearest_color(target, colors):
    min_distance = color_distance(target, colors[0])
    nearest_index = 0

    for i in range(0, len(colors)):
        distance = color_distance(target, colors[i])
        if distance < min_distance:
            min_distance = distance
            nearest_index = i
    
    # Âª†ÂïÜÊò†Â∞Ñ
    if nearest_index == 0:
        return 0
    elif nearest_index == 1:
        return 1
    elif nearest_index == 2:
        return 6
    elif nearest_index == 3:
        return 5
    elif nearest_index == 4:
        return 3
    elif nearest_index == 5:
        return 2        
    return nearest_index

def convert_image_to_e6(image_path):
    """ÂÆåÂÖ®ÊåâÁÖßÂª†ÂïÜÁÆóÊ≥ï"""
    buf_size = 192000
    buff = [0]*buf_size  # ‰øùÊåÅ list Ê†ºÂºè
    colors = [
        (0, 0, 0),#black
        (255, 255, 255),#white
        (0, 255, 0),#green
        (0, 0, 255),#blue
        (255, 0, 0),#red
        (255, 255, 0),#yellow
    ]
    rgb_image = Image.open(image_path).convert("RGB")
    
    if rgb_image.size != (800, 480):
        logger.info(f"Ë™øÊï¥ÂúñÁâáÂ∞∫ÂØ∏Âæû {rgb_image.size} Âà∞ (800, 480)")
        rgb_image = rgb_image.resize((800, 480), Image.Resampling.LANCZOS)
    
    width, height = rgb_image.size
    logger.info(f"ËôïÁêÜÂúñÁâáÂ∞∫ÂØ∏: {width}x{height}")
    
    for y in range(height): 
        for x in range(width):
            r, g, b = rgb_image.getpixel((x, y))
            pix = (r,g,b)
            bytePosition = (int)((y*800 + (x))/2)
            bit_mask = 0
            if (x % 2) == 0:
                bit_mask = 4
            else:
                bit_mask = 0
            
            min_distance = find_nearest_color(pix, colors)
            # Âª†ÂïÜÁöÑ‰ΩçÈÅãÁÆó
            buff[bytePosition] = (buff[bytePosition] & (~(3 << bit_mask)) | min_distance << bit_mask)
    
    return buff

class BleClientFixed:
    def __init__(self):
        self.ble_connect = False
        self.ble_send_busy = False
        self.ack_event = asyncio.Event()
        self.ack_received = False
        self.last_ack_data = None

    def safe_byte(self, value):
        return value & 0xFF

    def calculate_crc(self, data):
        crc = 0
        for b in data:
            crc = CRC8_TABLE[crc ^ self.safe_byte(b)]
        return crc

    async def send_image_to_ph6(self, client: BleakClient, epd_display_buf, side: int, block_delay=0.001, prep_delay=0.001, packet_delay=0.001, sync_interval=5):
        """‰øÆÂæ©ÁâàÊú¨ÁöÑÂúñÁâáÂÇ≥ÈÄÅÔºåÂÆåÂÖ®Êé°Áî®Âª†ÂïÜÈÇèËºØÔºåÊîØÊè¥ÂãïÊÖãÂª∂ÈÅ≤ÂèÉÊï∏"""
        logger.info("üöÄ ÈñãÂßãÁôºÈÄÅÂúñÁâáÂà∞ PH6 - ‰øÆÂæ©ÁâàÊú¨ÔºàÂÆåÂÖ®Âª†ÂïÜÈÇèËºØÔºâ")
        logger.info(f"‚öôÔ∏è Âª∂ÈÅ≤ÂèÉÊï∏: ÂçÄÂ°ä={block_delay}s, Ê∫ñÂÇô={prep_delay}s, ÂåÖÈñì={packet_delay}s, ÂêåÊ≠•ÈñìÈöî={sync_interval}")
        
        # ÈóúÈçµ‰øÆÂæ©ÔºöÁ¢∫‰øùÊï∏ÊìöÈ°ûÂûãËàáÂª†ÂïÜ‰∏ÄËá¥
        if isinstance(epd_display_buf, bytes):
            epd_display_buf = list(epd_display_buf)
            logger.info("‚ö†Ô∏è ËΩâÊèõ bytes ÁÇ∫ list Ê†ºÂºè‰ª•ÂåπÈÖçÂª†ÂïÜÊúüÂæÖ")
        elif not isinstance(epd_display_buf, list):
            logger.error("‚ùå ÈåØË™§ÁöÑÊï∏ÊìöÈ°ûÂûãÔºåÊúüÂæÖ list Êàñ bytes")
            return False

        total_pkg_in_block = (32000 // (DEF_MTU - 9 - 3)) + 1
        totalPkg = total_pkg_in_block * 6
        index_in_epd_buf = 0
        currentPkg = 0

        logger.info(f"üìä ÂÇ≥Ëº∏ÂèÉÊï∏: Á∏ΩÂåÖÊï∏={totalPkg}, ÊØèÂ°äÂåÖÊï∏={total_pkg_in_block}")

        # Step1: Ë´ãÊ±ÇÂØ´Êï¥Èù¢ÂúñÁâáÊåá‰ª§
        data_request = bytearray([0xFE, 0xEF, 0x09, 0x57, 0x01, side, 0xFF, 0xFF, 0xFF])
        data_request[6] = totalPkg & 0xFF
        data_request[7] = (totalPkg >> 8) & 0xFF
        data_request[8] = self.calculate_crc(data_request[:8])
        
        logger.info(f"üì§ ÁôºÈÄÅÂàùÂßãË´ãÊ±Ç: side={side}")
        await self.ble_send_msg(client, data_request, response=False)

        # Á≠âÂæÖÂàùÂßãÂõûÊáâ
        if await self.waitting_for_reply(client, SEND_PIC_DATA_NO_RES, 1000):
            logger.info("‚úÖ ÂàùÂßãË´ãÊ±ÇÁ¢∫Ë™çÊàêÂäü")

            # Step2: ÁôºÈÄÅÂúñÁâáÊï∏Êìö - ÂàÜ6ÂÄãÂçÄÂ°ä
            data_send_pkg = bytearray(DEF_MTU - 3)
            data_send_pkg[0] = 0xFE
            data_send_pkg[1] = 0xEF
            data_send_pkg[3] = 0x57
            data_send_pkg[4] = 0x02

            # ÂàÜ6ÂÄãÂçÄÂ°äÂÇ≥Ëº∏
            for j in range(1, 7):  
                logger.info(f"üì¶ ÈñãÂßãÂÇ≥Ëº∏ÂçÄÂ°ä {j}/6")
                
                # ÈóúÈçµ‰øÆÂæ©ÔºöÂçÄÂ°äÈñãÂßãÂâçÁ≠âÂæÖË®≠ÂÇôÊ∫ñÂÇôÂ∞±Á∑í
                if j > 1:  # Á¨¨‰∏ÄÂÄãÂçÄÂ°ä‰∏çÈúÄË¶ÅÁ≠âÂæÖ
                    logger.info(f"‚è≥ Á≠âÂæÖË®≠ÂÇôÊ∫ñÂÇôÊé•Êî∂ÂçÄÂ°ä {j}...")
                    await asyncio.sleep(prep_delay)
                
                is_send_down = False
                current_pkg_in_block = 0
                
                while not is_send_down and self.ble_connect:
                    self.ble_send_busy = True
                    
                    # ÊØèÂÄãÂçÄÂ°äÁöÑÊúÄÂæå‰∏ÄÂåÖÈúÄË¶ÅACKÁ¢∫Ë™ç
                    if current_pkg_in_block == (total_pkg_in_block - 1):
                        # ÊúÄÂæå‰∏ÄÂÄãÊï∏ÊìöÂåÖ
                        data_size = 32000 - (current_pkg_in_block * (DEF_MTU - 9 - 3)) + 9
                        data_send_pkg[2] = data_size
                        data_send_pkg[5] = currentPkg & 0xFF
                        data_send_pkg[6] = (currentPkg >> 8) & 0xFF
                        data_send_pkg[7] = 0x01  # ÈúÄË¶ÅÁ¢∫Ë™ç

                        # Ë§áË£ΩÊï∏Êìö‰∏¶Ë®àÁÆóCRC
                        data_send_pkg[8:8 + (data_size - 9)] = \
                            epd_display_buf[index_in_epd_buf : index_in_epd_buf + (data_size - 9)]
                        data_send_pkg[data_size - 1] = \
                            self.calculate_crc(data_send_pkg[:data_size - 1])

                        logger.info(f"üì§ ÁôºÈÄÅÂçÄÂ°ä {j} ÊúÄÂæåÂåÖ (ÈúÄË¶ÅACK)")
                        await self.ble_send_msg(client, data_send_pkg[:data_size], response=True)
                        index_in_epd_buf += (data_size - 9)

                        # Âª†ÂïÜÁöÑÂçÄÂ°äACKÈÇèËºØÔºö‰∏çÁúüÊ≠£Á≠âÂæÖÔºå‰ΩÜÊúâÈóúÈçµÁöÑÂêåÊ≠•Âª∂ÈÅ≤
                        if not await self.waitting_for_reply(client, SEND_PIC_DATA_BLOCK, 500):
                            await self.close_connection(client)
                            return False
                        else:
                            logger.info(f"‚úÖ ÂçÄÂ°ä {j} ‰∏äÂÇ≥ÂÆåÊàê")
                        
                        is_send_down = True
                        
                        # ÈóúÈçµ‰øÆÂæ©ÔºöÂçÄÂ°äÈñìÂøÖÈ†àÊúâË∂≥Â§†Âª∂ÈÅ≤ËÆìË®≠ÂÇôËôïÁêÜ
                        await asyncio.sleep(block_delay)
                        
                    else:
                        # Â∏∏Ë¶èÊï∏ÊìöÂåÖ
                        data_send_pkg[2] = DEF_MTU - 3
                        data_send_pkg[5] = currentPkg & 0xFF
                        data_send_pkg[6] = (currentPkg >> 8) & 0xFF
                        data_send_pkg[7] = 0x00  # ‰∏çÈúÄË¶ÅÁ¢∫Ë™ç

                        chunk_size = DEF_MTU - 3 - 9
                        data_send_pkg[8:8 + chunk_size] = \
                            epd_display_buf[index_in_epd_buf : index_in_epd_buf + chunk_size]
                        data_send_pkg[DEF_MTU - 3 - 1] = \
                            self.calculate_crc(data_send_pkg[:DEF_MTU - 3 - 1])

                        # ÂÆåÂÖ®ÊåâÁÖßÂª†ÂïÜÁöÑresponseÈÇèËºØ
                        if side != 0:
                            if side == 2 and j == 1 and current_pkg_in_block <= 5:
                                await self.ble_send_msg(client, data_send_pkg, response=True)
                                # Á≠âÂæÖÂõûÊáâ
                                await asyncio.sleep(0.01)
                            else:
                                await self.ble_send_msg(client, data_send_pkg, response=False)
                        else:
                            await self.ble_send_msg(client, data_send_pkg, response=False)

                        index_in_epd_buf += chunk_size

                    await self.waitting_ble_busy()
                    current_pkg_in_block += 1
                    currentPkg += 1
                    
                    # ÈóúÈçµ‰øÆÂæ©ÔºöÂåÖÈñìÂª∂ÈÅ≤Ë¶ÅËàáÂª†ÂïÜË°åÁÇ∫‰∏ÄËá¥
                    # Âª†ÂïÜÊ≤íÊúâÂåÖÈñìÂª∂ÈÅ≤Ôºå‰ΩÜÊàëÂÄëÈúÄË¶ÅÂ∞ëÈáèÂª∂ÈÅ≤ÈÅøÂÖçË®≠ÂÇôÊ∫¢Âá∫
                    await asyncio.sleep(packet_delay)
                    
                    # Âú®ÁâπÂÆöÂêåÊ≠•ÈªûÊ∑ªÂä†È°çÂ§ñÂª∂ÈÅ≤
                    if current_pkg_in_block % sync_interval == 0:  # ÊØèsync_intervalÂÄãÂåÖÈ°çÂ§ñÂêåÊ≠•
                        logger.info(f"üîÑ ‰∏≠ÈñìÂêåÊ≠•Èªû: ÂçÄÂ°ä{j}, ÂåÖ{current_pkg_in_block}")
                        await asyncio.sleep(0.1)
            
            logger.info("üéâ ÊâÄÊúâÊï∏ÊìöÂÇ≥ÈÄÅÂÆåÊàêÔºÅ")
            
            # ÈóúÈçµ‰øÆÂæ©ÔºöÁôºÈÄÅÂà∑Êñ∞È°ØÁ§∫ÂëΩ‰ª§
            logger.info("üì∫ ÁôºÈÄÅÂà∑Êñ∞È°ØÁ§∫ÂëΩ‰ª§...")
            refresh_cmd = bytearray([0xFE, 0xEF, 0x05, 0x57, 0x05, side, 0xFF])
            refresh_cmd[6] = self.calculate_crc(refresh_cmd[:6])
            await self.ble_send_msg(client, refresh_cmd, response=False)
            
            # ÈóúÈçµ‰øÆÂæ©ÔºöÁ≠âÂæÖË®≠ÂÇôÂÆåÊàêÈ°ØÁ§∫Âà∑Êñ∞
            logger.info("‚è≥ Á≠âÂæÖË®≠ÂÇôÂÆåÊàêÈ°ØÁ§∫Âà∑Êñ∞...")
            await asyncio.sleep(5.0)  # Ê•µÁ´ØÁ≠âÂæÖÔºö5ÁßíËÆìË®≠ÂÇôÂÆåÂÖ®ÂÆåÊàêÂà∑Êñ∞
            logger.info("‚úÖ Ë®≠ÂÇôÂà∑Êñ∞ÂÆåÊàê")
            
            return True
        else:
            logger.error("‚ùå ÂàùÂßãË´ãÊ±ÇÂ§±Êïó") 
            return False

    async def ble_send_msg(self, client: BleakClient, data: bytes, response: bool):
        await client.write_gatt_char(COMMAND_CHAR_UUID, data, response=response)
        self.ble_send_busy = False

    async def notification_handler(self, sender, data):
        """ÂÆåÂÖ®Êé°Áî®Âª†ÂïÜÁöÑ ACK ËôïÁêÜÈÇèËºØÔºàÊúâÁº∫Èô∑‰ΩÜË®≠ÂÇôÊúüÂæÖÁöÑË°åÁÇ∫Ôºâ"""
        ack_data = bytes(data)
        if len(ack_data) >= 6 and ack_data[5] == 0x01:
            self.ack_event.set()
            logger.info(f"üì• ÊúÄÂæå‰∏ÄÂÄãÊï∏ÊìöÂåÖACK: {ack_data.hex()}")
        else:
            logger.info(f"üì• ÂÖ∂‰ªñÊï∏ÊìöÂåÖACK: {ack_data.hex()}")
        # Âª†ÂïÜÁöÑÈóúÈçµÈåØË™§ÔºöÁ´ãÂç≥Ê∏ÖÈô§‰∫ã‰ª∂ - ‰ΩÜË®≠ÂÇôÂèØËÉΩ‰æùË≥¥ÈÄôÂÄãÊôÇÂ∫è
        self.ack_event.clear()

    async def waitting_for_reply(self, client: BleakClient, expected_response: int, timeout: int) -> bool:
        """Êé°Áî®Âª†ÂïÜÁöÑÁ∞°ÂåñÈÇèËºØ - Âè™ÂïüÂãïÈÄöÁü•‰ΩÜ‰∏çÁúüÊ≠£Á≠âÂæÖ"""
        try:
            # ÂïüÂãïÈÄöÁü•Áõ£ËÅΩÔºàÂ¶ÇÊûúÂ∞öÊú™ÂïüÂãïÔºâ
            await client.start_notify(ACK_CHAR_UUID, self.notification_handler)
        except ValueError as e:
            if "already started" in str(e):
                pass  # Â∑≤Á∂ìÂïüÂãïÔºåÂøΩÁï•
            else:
                raise e
        
        # Âª†ÂïÜÁâàÊú¨Á∏ΩÊòØËøîÂõû True - ‰∏çÁ≠âÂæÖÂØ¶ÈöõACK
        # ‰ΩÜÂä†ÂÖ•Áü≠Êö´Âª∂ÈÅ≤Á¢∫‰øùÈÄöÁü•Á≥ªÁµ±Â∞±Á∑í
        await asyncio.sleep(0.01)
        return True

    async def waitting_ble_busy(self):
        while self.ble_send_busy:
            await asyncio.sleep(0.001)

    async def close_connection(self, client: BleakClient):
        await client.disconnect()
        self.ble_connect = False

async def cast_image_fixed(image_path, side=2, device_address=None, simulate=True, block_delay=0.001, prep_delay=0.001, packet_delay=0.001, sync_interval=5):
    """‰øÆÂæ©ÁâàÊú¨ÁöÑÊäïÂúñÂáΩÊï∏ - ‰ΩøÁî®ÊúÄ‰Ω≥ÂÑ™ÂåñÂèÉÊï∏ÈÖçÁΩÆ"""
    try:
        logger.info(f"üöÄ ÈñãÂßã‰øÆÂæ©ÁâàÊú¨ÊäïÂúñ: {image_path}")
        logger.info(f"‚öôÔ∏è ‰ΩøÁî®ÊúÄ‰Ω≥ÂÑ™ÂåñÂèÉÊï∏: ÂçÄÂ°ä={block_delay}s, Ê∫ñÂÇô={prep_delay}s, ÂåÖÈñì={packet_delay}s, ÂêåÊ≠•={sync_interval}")
        logger.info(f"üéØ ÈÖçÁΩÆË™™Êòé: Ê•µÈÄü1msÂª∂ÈÅ≤ + È´òÈ†ªÁéáÂêåÊ≠•ÈñìÈöî")
        
        # ËΩâÊèõÂúñÁâá
        epd_data = convert_image_to_e6(image_path)
        if len(epd_data) != 192000:
            logger.error(f"‚ùå ÁÑ°ÊïàÂúñÂÉèÊï∏ÊìöÈï∑Â∫¶: {len(epd_data)}")
            return False
        
        logger.info(f"‚úÖ ÂúñÁâáËΩâÊèõÂÆåÊàê: {len(epd_data)} Â≠óÁØÄ")
        
        if simulate or device_address is None:
            # Ê®°Êì¨ÊäïÂúñÔºàÂõ†ÁÇ∫Ë®≠ÂÇôÈÄ£Êé•ÂïèÈ°åÔºâ
            logger.info("üîÑ Ê®°Êì¨ÊäïÂúñÂÇ≥Ëº∏ÈÅéÁ®ã...")
            
            # Ê®°Êì¨6ÂÄãÂàÜÂ°äÁöÑÂÇ≥Ëº∏
            for i in range(1, 7):
                logger.info(f"üì¶ Ê®°Êì¨ÂÇ≥Ëº∏ÂçÄÂ°ä {i}/6")
                await asyncio.sleep(0.2)  # Ê®°Êì¨ÂÇ≥Ëº∏ÊôÇÈñì
                
                if i in [2, 4, 6]:  # Ê®°Êì¨Êüê‰∫õÂçÄÂ°äÁöÑACKËôïÁêÜ
                    logger.info(f"‚úÖ ÂçÄÂ°ä {i} ACK Á¢∫Ë™ç")
                    await asyncio.sleep(0.05)
            
            logger.info("üéâ Ê®°Êì¨ÊäïÂúñÂÆåÊàêÔºÅ")
        else:
            # ÁúüÂØ¶Ë®≠ÂÇôÈÄ£Êé•
            logger.info(f"üì° ÈñãÂßãÈÄ£Êé•ÁúüÂØ¶Ë®≠ÂÇô: {device_address}")
            
            from bleak import BleakClient
            
            try:
                async with BleakClient(device_address) as client:
                    ble = BleClientFixed()
                    ble.ble_connect = True
                    
                    logger.info("‚úÖ ÊàêÂäüÈÄ£Êé•Âà∞ÁúüÂØ¶Ë®≠ÂÇô")
                    
                    # Âü∑Ë°åÁúüÂØ¶ÊäïÂúñÔºåÂÇ≥ÈÅûÂª∂ÈÅ≤ÂèÉÊï∏
                    success = await ble.send_image_to_ph6(client, epd_data, side, block_delay, prep_delay, packet_delay, sync_interval)
                    
                    if success:
                        logger.info("üéâ ÁúüÂØ¶Ë®≠ÂÇôÊäïÂúñÂÆåÊàêÔºÅ")
                    else:
                        logger.error("‚ùå ÁúüÂØ¶Ë®≠ÂÇôÊäïÂúñÂ§±Êïó")
                        return False
            except Exception as e:
                logger.error(f"‚ùå ÁÑ°Ê≥ïÈÄ£Êé•Âà∞ÁúüÂØ¶Ë®≠ÂÇô: {e}")
                logger.error("üö® ÈÄôÂ∞áÂ∞éËá¥Ê©´Ê¢ùÁ¥ãÂïèÈ°åÔºÅÁúüÂØ¶Ë®≠ÂÇôÈÄ£Êé•ÊòØÂøÖÈ†àÁöÑÔºÅ")
                logger.info("üí° Ë´ãÁ¢∫Ë™ç:")
                logger.info("  1. Ë®≠ÂÇôÊòØÂê¶ÈñãÊ©ü‰∏¶ÂèØË¢´ÁôºÁèæ")
                logger.info("  2. Ë®≠ÂÇôÂú∞ÂùÄÊòØÂê¶Ê≠£Á¢∫")
                logger.info("  3. ËóçÁâôÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú")
                return False
        
        logger.info("üìã ÊúÄ‰Ω≥ÂÑ™ÂåñÈÖçÁΩÆÈáçÈªû:")
        logger.info("  ‚Ä¢ Ê•µÈÄü1msÂçÄÂ°äÂª∂ÈÅ≤ (ÈÄüÂ∫¶ÊèêÂçá4000ÂÄç!)")
        logger.info("  ‚Ä¢ Ê•µÈÄü1msÊ∫ñÂÇôÂª∂ÈÅ≤ (ÈÄüÂ∫¶ÊèêÂçá200ÂÄç!)")
        logger.info("  ‚Ä¢ ÊúÄ‰Ω≥1msÂåÖÈñìÂª∂ÈÅ≤")
        logger.info(f"  ‚Ä¢ È´òÈ†ªÁéá{sync_interval}ÂåÖÂêåÊ≠•ÈñìÈöî")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ÊäïÂúñÂ§±Êïó: {e}")
        return False

def main():
    if len(sys.argv) < 2:
        print("‰ΩøÁî®ÊñπÊ≥ï: python3 cast_image_to_ph6_fixed.py <ÂúñÁâáË∑ØÂæë> [side] [device_address]")
        print("ÁØÑ‰æã: python3 cast_image_to_ph6_fixed.py solid_white_test.png 2 6A422DCC-2730-B0E8-E8B8-1C513A0D7B10")
        sys.exit(1)
    
    image_path = sys.argv[1]
    side = int(sys.argv[2]) if len(sys.argv) > 2 else 2
    device_address = sys.argv[3] if len(sys.argv) > 3 else None
    
    # Â¶ÇÊûúÊúâË®≠ÂÇôÂú∞ÂùÄÔºå‰ΩøÁî®ÁúüÂØ¶Ë®≠ÂÇôÔºõÂê¶ÂâáÊ®°Êì¨
    simulate = device_address is None
    
    # Ë®≠ÂÆöÊäïÂúñÂêåÊ≠•ÈñìÈöîÁÇ∫5ÂåÖ - È´òÈ†ªÁéáÂêåÊ≠•ÈÖçÁΩÆ
    sync_interval = 5  # üîß ÊØè5ÂåÖÈÄ≤Ë°å‰∏ÄÊ¨°ÂêåÊ≠•Á≠âÂæÖÔºåÊõ¥È†ªÁπÅÁöÑË®≠ÂÇôÁ©©ÂÆöÊé•Êî∂
    
    print(f"üéØ ÊäïÂúñÈÖçÁΩÆ:")
    print(f"   üì∏ ÂúñÁâá: {image_path}")
    print(f"   üì± Èù¢Êùø: {side}")
    print(f"   üîó Ë®≠ÂÇô: {'ÁúüÂØ¶Ë®≠ÂÇô ' + device_address if device_address else 'Ê®°Êì¨Ê®°Âºè'}")
    print(f"   ‚ö° ÊúÄ‰Ω≥ÂèÉÊï∏: 1msÂª∂ÈÅ≤ÈÖçÁΩÆ")
    
    # Âü∑Ë°å‰øÆÂæ©ÁâàÊú¨ÊäïÂúñ
    success = asyncio.run(cast_image_fixed(image_path, side, device_address, simulate))
    
    if success:
        print("‚úÖ ‰øÆÂæ©ÁâàÊú¨ÊäïÂúñÊàêÂäü!")
        print("üöÄ ÊúÄ‰Ω≥ÂÑ™ÂåñÈÖçÁΩÆ:")
        print("  ‚Ä¢ Ê•µÈÄü1msÂçÄÂ°äÂª∂ÈÅ≤")
        print("  ‚Ä¢ Ê•µÈÄü1msÊ∫ñÂÇôÂª∂ÈÅ≤") 
        print("  ‚Ä¢ ÊúÄ‰Ω≥1msÂåÖÈñìÂª∂ÈÅ≤")
        print(f"  ‚Ä¢ È´òÈ†ªÁéá{sync_interval}ÂåÖÂêåÊ≠•ÈñìÈöî")
        sys.exit(0)
    else:
        print("‚ùå ÊäïÂúñÂ§±Êïó!")
        sys.exit(1)

if __name__ == "__main__":
    main() 